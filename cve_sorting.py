import requests
from bs4 import BeautifulSoup
import json
import time


severitydict = {
    'One_Click':[],
    'Critical':[],
    'High':[]
}

cwedict = {}
cweseveritydict = {}
cvedict = {}


#the below file contains all the CVEs that matches our filters
database = open("descdatabase.txt", "w")


spcase=0
critical=0
high=0
medium=0
low=0


database.write("All the CVEs that match all the criteria - have CWE ID, CVSS score 2, 3.0 or 3.1")
database.write("------------------------------------------------------------------------------------\n\n")


totalmatching=0
totalcvssmetric=0
weaknessfound=0
cwefound=0

#taking into account only the CVEs present in cisa known exploited vulnerability list
hasKev = True

#creating date range for the parameters to API endpoint
for i in (1,4,7,10):
    if(i==10):
        startdate = "2024-"+str(i)+"-01"    
    else:
        startdate = "2024-0"+str(i)+"-01"
    if(i+3 > 12):
        enddate = "2024-12-31"
    else:
        if(i+3 >= 10):
            enddate = "2024-"+str(i+3)+"-01"
        else:
            enddate = "2024-0"+str(i+3)+"-01"

    print("Start date = " + startdate + " & End date = " + enddate)

    database.write("Start date = " + startdate + "\nEnd date = " + enddate + "\n")
    database.write("\n-----------------------------------------------------------------------------------------------\n")

    #different URLs structure for hasKev and without hasKev
    urlcheck = "https://services.nvd.nist.gov/rest/json/cves/2.0?hasKev&pubStartDate="+startdate+"T00:00:00.000&pubEndDate="+enddate+"T00:00:00.000"
    if hasKev==False:
        urlcheck = "https://services.nvd.nist.gov/rest/json/cves/2.0?pubStartDate="+startdate+"T00:00:00.000&pubEndDate="+enddate+"T00:00:00.000"
    print("URL for check = ",urlcheck)

    #this request is to check number of results in the response, as there are large number of results sometimes, for which we need to go to further pages to get all the results
    response = requests.get(urlcheck)
    time.sleep(15)

    jsondata={}
    if response.status_code == 200:
        jsondata = response.json()
        #print(data)
    else:
        print("Error: {} {}".format(response.status_code, response.reason))
        exit()


    print("Total Results = " + str(jsondata['totalResults']))

    #calculating number of times we need to send the request to get all the data, startIndex is used to get further data
    totalres = jsondata['totalResults']
    resperpage = 2000
    looptimes = totalres // resperpage

    for n in range(looptimes+1):
        url = "https://services.nvd.nist.gov/rest/json/cves/2.0?hasKev&pubStartDate="+startdate+"T00:00:00.000&pubEndDate="+enddate+"T00:00:00.000&startIndex="+str(resperpage*n)
        if hasKev==False:
            url = "https://services.nvd.nist.gov/rest/json/cves/2.0?pubStartDate="+startdate+"T00:00:00.000&pubEndDate="+enddate+"T00:00:00.000&startIndex="+str(resperpage*n)
        print("URL= ",url)

        res = requests.get(url)
        time.sleep(15)

        jsonres={}
        if res.status_code == 200:
            jsonres = res.json()
            #print(data)
        else:
            print("Error: {} {}".format(res.status_code, res.reason))
            exit()

        cwematching=0
       

        for i in jsonres['vulnerabilities']:

            if(len(i['cve']['metrics'])==0):
                continue
            cvedetail = ""
            cveid = i['cve']['id']
            source = i['cve']['sourceIdentifier']
            cvename = i['cve']['cisaVulnerabilityName']
            description = i['cve']['descriptions'][0]['value']
       

            totalmatching+=1
            cwematching+=1

            #getting the details from CVEs found in date range
            
            metricversion=''
            if(i['cve']['metrics'].get('cvssMetricV31')!=None):
                metricversion = 'cvssMetricV31'
            elif(i['cve']['metrics'].get('cvssMetricV30')!=None):
                metricversion = 'cvssMetricV30'
            elif(i['cve']['metrics'].get('cvssMetricV31')==None and i['cve']['metrics'].get('cvssMetricV30')==None and i['cve']['metrics'].get('cvssMetricV2')!=None):
                metricversion = 'cvssMetricV2'
            else:
                continue
            totalcvssmetric+=1
            version = i['cve']['metrics'][metricversion][0]['cvssData']['version']
            vectorstring = i['cve']['metrics'][metricversion][0]['cvssData']['vectorString']
            privreq = i['cve']['metrics'][metricversion][0]['cvssData']['privilegesRequired']
            userint = i['cve']['metrics'][metricversion][0]['cvssData']['userInteraction']
            score = i['cve']['metrics'][metricversion][0]['cvssData']['baseScore']
            severity = i['cve']['metrics'][metricversion][0]['cvssData']['baseSeverity']


            weaknesssource = ''
            weaknessvalue = ''
            cwename = ''

            #checking if CWE component is present in the CVE
            if('weaknesses' in i['cve']):
                weaknessfound+=1
                weaknesssource = i['cve']['weaknesses'][0]['source']
                weaknessvalue = i['cve']['weaknesses'][0]['description'][0]['value']
                if(weaknessvalue!="NVD-CWE-noinfo" and weaknessvalue!="NVD-CWE-Other"):
                    cwefound+=1
                    
                    severityfound=False
                    #sorting the CVEs based on severity
                    if((severity=='HIGH' or severity=='CRITICAL') and privreq=='NONE' and userint=='NONE'):
                        severitydict["One_Click"].append(cveid)
                        #details.write("One Click")
                        cvedetail += "One Click\n"
                        if(weaknessvalue not in cweseveritydict):
                            cweseveritydict[weaknessvalue]=["One Click"]
                        else:
                            cweseveritydict[weaknessvalue].append("One Click")
                        
                        severityfound=True
                        cvedict[cveid]=3
                    elif(severity=='CRITICAL'):
                        severitydict["Critical"].append(cveid)
                        
                        cvedetail += "Critical\n"
                        if(weaknessvalue not in cweseveritydict):
                            cweseveritydict[weaknessvalue]=["Critical"]
                        else:
                            cweseveritydict[weaknessvalue].append("Critical")
                        
                        severityfound=True
                        cvedict[cveid]=2
                    elif(severity=='HIGH'):
                        severitydict["High"].append(cveid)
                        
                        cvedetail += "High\n"
                        if(weaknessvalue not in cweseveritydict):
                            cweseveritydict[weaknessvalue]=["High"]
                        else:
                            cweseveritydict[weaknessvalue].append("High")
                        
                        severityfound=True
                        cvedict[cveid]=1

                    if(severityfound==True):
                        if(weaknessvalue in cwedict):
                            cwedict[weaknessvalue]+=1
                        else:
                            cwedict[weaknessvalue]=1
                    

                    cvedetail += "CVE ID: " + cveid +"\n"
                    cvedetail += "CVE name: " + cvename + "\n"
                    
                    cvedetail += "Weakness value: " + weaknessvalue +"\n"

                    database.write(cvedetail)
                    database.write("\n----------------------------------------------------------------\n")
                    
           

        database.write("Total number of CVEs found = " + str(totalmatching) + "\n")
        database.write("Number of CVEs with High or Critical severity, No privilege required and No user interaction= " + str(spcase) + "\n")
        database.write("Number of Critical severity CVEs = " + str(critical) + "\n")
        database.write("Number of High severity CVEs = " + str(high) + "\n")
        database.write("Number of Medium severity CVEs = " + str(medium) + "\n")
        database.write("Number of Low severity CVEs = " + str(low) + "\n")
        database.write("\n-----------------------------------------------------------------------------------------------\n")


print("Total matcing CVEs = ", str(totalmatching))
print("Total CVE with CVSS 2.0, 3.0 or 3.1 = ", str(totalcvssmetric))
print("Total CVE found with weakness key = ", str(weaknessfound))
print("Total CVE found with CWE ID = ", str(cwefound))


sortedcwelist = sorted(cwedict.items(), key=lambda x:x[1], reverse=True)
sortedcwedict = dict(sortedcwelist)

print("\n-------------------------\n")
#printing the CWEs encountered in the filtered CVEs
for i in sortedcwedict:
    print(i, " : ", sortedcwedict[i], " : ", cweseveritydict[i])

print("\n-------------------------\n")

sortedcvelist = sorted(cvedict.items(), key=lambda x:x[1], reverse=True)
sortedcvedict = dict(sortedcvelist)

#printing the final list of sorted CVEs
for cve in sortedcvedict:
    severity=""
    if(sortedcvedict[cve]==3):
        severity="One Click"
    elif(sortedcvedict[cve]==2):
        severity="Critical"
    elif(sortedcvedict[cve]==1):
        severity="High"    
    print(cve, " : ", severity)


database.close()
